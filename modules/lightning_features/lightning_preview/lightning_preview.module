<?php

/**
 * @file
 * Contains code for Lightning's integration with workspaces.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\multiversion\Entity\WorkspaceType;

/**
 * Computes an access result based on moderation state of the active workspace.
 *
 * @return \Drupal\Core\Access\AccessResult
 *   The access result.
 */
function lightning_preview_workspace_lock() {
  /** @var \Drupal\multiversion\Entity\WorkspaceInterface $workspace */
  $workspace = \Drupal::service('workspace.manager')->getActiveWorkspace();

  if ($workspace->hasField('moderation_state')) {
    $is_locked = in_array(
      $workspace->moderation_state->target_id,
      $workspace->type->entity->getThirdPartySetting('workbench_moderation', 'locked_states')
    );

    return AccessResult::forbiddenIf($is_locked);
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_entity_create_access().
 */
function lightning_preview_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  return $context['entity_type_id'] == 'workspace'
    ? AccessResult::neutral()
    : lightning_preview_workspace_lock();
}

/**
 * Implements hook_entity_access().
 */
function lightning_preview_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Don't interfere with the view operation.
  if ($operation == 'view') {
    return AccessResult::neutral();
  }

  return $entity->getEntityTypeId() == 'workspace'
    ? AccessResult::neutral()
    : lightning_preview_workspace_lock();
}

/**
 * Implements hook_form_FORM_ID_alter() for moderation_state_edit_form().
 *
 * The aforementioned moderation_state_edit_form() is not a function, but PHP
 * Code Sniffer is too stupid to understand that. Take it up with him.
 */
function lightning_preview_form_moderation_state_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $state_id = $form_state->getFormObject()->getEntity()->id();

  $settings = WorkspaceType::load('basic')
    ->getThirdPartySettings('workbench_moderation');

  if (empty($settings)) {
    return;
  }
  if ($settings['enabled'] && in_array($state_id, $settings['allowed_moderation_states'])) {
    $form['lock_workspace'] = [
      '#type' => 'checkbox',
      '#title' => t('Lock workspaces in this state'),
      '#default_value' => in_array($state_id, $settings['locked_states']),
      '#description' => t('If checked, no changes can be made in a workspace when it reaches this state.'),
    ];
    $form['#submit'][] = 'lightning_preview_save_locked_state';
  }
}

/**
 * Submit callback. Sets whether the moderation state should lock workspaces.
 *
 * @param array $form
 *   The complete form.
 * @param FormStateInterface $form_state
 *   The current form state.
 */
function lightning_preview_save_locked_state(array &$form, FormStateInterface $form_state) {
  $workspace_type = WorkspaceType::load('basic');
  $locked_states = $workspace_type->getThirdPartySetting('workbench_moderation', 'locked_states');
  $state_id = $form_state->getFormObject()->getEntity()->id();

  if ($form_state->getValue('lock_workspace')) {
    $locked_states[] = $state_id;
    $locked_states = array_unique($locked_states);
  }
  else {
    $locked_states = array_diff($locked_states, [$state_id]);
  }

  $workspace_type
    ->setThirdPartySetting('workbench_moderation', 'locked_states', $locked_states)
    ->save();
}

/**
 * Implements hook_modules_installed().
 *
 * Enables moderation for the default workspace entity.
 */
function lightning_preview_modules_installed() {
  WorkspaceType::load('basic')
    ->setThirdPartySetting('workbench_moderation', 'enabled', TRUE)
    ->setThirdPartySetting('workbench_moderation', 'allowed_moderation_states', [
      'draft',
      'needs_review',
      'published',
    ])
    ->setThirdPartySetting('workbench_moderation', 'default_moderation_state', 'draft')
    ->setThirdPartySetting('workbench_moderation', 'locked_states', [
      'archived',
      'published',
    ])
    ->save();
}
